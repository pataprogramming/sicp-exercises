#+TITLE: SICP Exercise Solutions for Section 2.1
#+AUTHOR: Paul L. Snyder
#+EMAIL: paul@pataprogramming.com
#+TODO: TODO(t) WRITEUP(w) || (d)

* 2.1.1 Example: Arithmetic Operations for Rational Numbers
** WRITEUP Exercise 2.1: Improving =make-rat=
*** Problem
     Define a better version of =make-rat= that handles both positive
     and negative arguments.  =make-rat= should normalize the sign so
     that if the rational number is positive, both the numerator and
     denominator are positive, and if the rational number is negative,
     only the numerator is negative.

*** Solution

#+BEGIN_SRC scheme :session 2-1 :results silent
  (define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))

  (define (make-rat n d)
    (let ((nf (if (< d 0) (- n) n))
          (df (abs d))
          (g (abs (gcd n d))))
      (cons (/ nf g) (/ df g))))
#+END_SRC

* 2.1.2 Abstraction Barriers
** WRITEUP Exercise 2.2:
*** Problem
     Consider the problem of representing line segments
     in a plane.  Each segment is represented as a pair of points: a
     starting point and an ending point.  Define a constructor
     =make-segment= and selectors =start-segment= and =end-segment=
     that define the representation of segments in terms of points.
     Furthermore, a point can be represented as a pair of numbers: the
     $x$ coordinate and the $y$ coordinate.  Accordingly, specify a
     constructor =make-point= and selectors =x-point= and =y-point=
     that define this representation.  Finally, using your selectors
     and constructors, define a procedure =midpoint-segment= that takes
     a line segment as argument and returns its midpoint (the point
     whose coordinates are the average of the coordinates of the
     endpoints).  To try your procedures, you'll need a way to print
     points:

#+BEGIN_SRC scheme :session 2-1 :results silent
  (define (print-point p)
    (newline)
    (display "(")
    (display (x-point p))
    (display ",")
    (display (y-point p))
    (display ")"))
#+END_SRC

*** Solution
#+BEGIN_SRC scheme :session 2-1 :results silent
    (define (make-point x y)
      (cons x y))

    (define (x-point p)
      (car p))

    (define (y-point p)
      (cdr p))

    (define (make-segment a b)
      (cons a b))

    (define (start-segment s)
      (car s))

    (define (end-segment s)
      (cdr s))

    (define (midpoint-segment s)
      (let ((x1 (x-point (start-segment s)))
            (y1 (y-point (start-segment s)))
            (x2 (x-point (end-segment s)))
            (y2 (y-point (end-segment s))))
        (make-point (/ (+ x1 x2) 2) (/ (+ y1 y2) 2))))
#+END_SRC

** Exercise 2.3: Rectangular representations
*** Problem

     Implement a representation for rectangles in a plane.  (Hint: You
     may want to make use of Exercise 2-2.)  In terms of your
     constructors and selectors, create procedures that compute the
     perimeter and the area of a given rectangle.  Now implement a
     different representation for rectangles.  Can you design your
     system with suitable abstraction barriers, so that the same
     perimeter and area procedures will work using either
     representation?

*** Solution

One possibility is to represent a rectangle using any two points in the
plane. For tidiness, we can normalize the internal representation
of these much as we did for exercise 2.1.

#+BEGIN_SRC scheme :session 2-1 :results silent
  (define (make-rectangle point1 point2)
    ;; normalize to top-left and bottom-right points
    (let ((x1 (min (x-point point1) (x-point point2)))
          (x2 (max (x-point point1) (x-point point2)))
          (y1 (max (y-point point1) (y-point point2)))
          (y2 (min (y-point point1) (y-point point2))))
      (cons (make-point x1 y1) (make-point x2 y2))))

  (define (top-left-rectangle r)
    (car r))

  (define (bottom-right-rectangle r)
    (cdr r))

  (define (width-rectangle r)
    (let ((x1 (x-point (top-left-rectangle r)))
          (x2 (x-point (bottom-right-rectangle r))))
      (abs (- x2 x1))))

  (define (height-rectangle r)
    (let ((y1 (y-point (top-left-rectangle r)))
          (y2 (y-point (bottom-right-rectangle r))))
      (abs (- y1 y2))))

  (define (area-rectangle r)
    (* (width-rectangle r) (height-rectangle r)))

  (define (perimeter-rectangle r)
    (* 2 (+ (width-rectangle r) (height-rectangle r))))
#+END_SRC

For another representation we could construct a representation from a
point and offsets from this point in terms of width and height.

If we were constructing a real representation (rather than just
working with an exercise in a book), we might like to do some
additional normalization for this representation as well.  In this
case, though, we'll just go with a simple constructor.

Since we haven't been introduced to robust error-checking mechanisms,
yet (such as contracts in Racket), we'll just assume that the width
and height provided are positive, and providing negative values will
result in undefined behavior.

#+BEGIN_SRC scheme :session 2-1 :results silent
  (define (make-rectangle point width height)
    (cons point (cons width height)))

  (define (bottom-right-rectangle r)
    (let ((x1 (x-point (top-left-rectangle r)))
          (y1 (y-point (top-left-rectangle r))))
      (make-point (+ x1 (car (cdr r))) (+ y1 (cdr (cdr r))))))
#+END_SRC

This isn't the most satisfying reimplementation, not least because
we're missing a most important language feature: polymorphism: there's
no way for a procedure to detect which internal representation is
being used.

We could get around this by have this alternate constructor produce an
internal representation that's the same as the first version, but
that's not the description of the problem.  For the moment, we'll just
note that none of the other procedures need to be changed for this to
work, but that based on the facilities we have available to us right
now we can't easily use rectangles that use differing internal
representations.

* 2.1.3 What Is Meant by Data?
** Exercise 2.4: Lambdas as data structures
*** Problem
     Here is an alternative procedural representation
     of pairs.  For this representation, verify that =(car (cons x y))=
     yields =x= for any objects =x= and =y=.


#+BEGIN_SRC
          (define (cons x y)
            (lambda (m) (m x y)))

          (define (car z)
            (z (lambda (p q) p)))
#+END_SRC

     What is the corresponding definition of =cdr=? (Hint: To verify
     that this works, make use of the substitution model of section
     1.1.5.)

*** Solution

First, a definition for =cdr= using this approach:

#+BEGIN_SRC :results silent
  (define (cdr z)
    (z (lambda (p q) q)))
#+END_SRC

Now, we verify these alternate versions of both =car= and =cdr=.
First, to verify =car= we follow the suggestion in the exercise and
use the substitution method.

#+BEGIN_EXAMPLE
1> (car (cons x y))
2> (car (lambda (m) (m x y))
3> ((lambda (m) (m x y)) (lambda (p q) p))
4> ((lambda (p q) p) x y)
5> ((lambda (x y) x))
6> x
#+END_EXAMPLE

Verifying the alternative version of =cdr= follows exactly the same
pattern.

#+BEGIN_EXAMPLE
1> (cdr (cons x y))
2> (cdr (lambda (m) (m x y))
3> ((lambda (m) (m x y)) (lambda (p q) q))
4> ((lambda (p q) q) x y)
5> ((lambda (x y) y))
6> y
#+END_EXAMPLE

** WRITEUP Exercise 2.5:
*** Problem
     Show that we can represent pairs of non-negative integers using
     only numbers and arithmetic operations if we represent the pair
     $a$ and $b$ as the integer that is the product $2^a 3^b$.  Give
     the corresponding definitions of the procedures =cons=, =car=,
     and =cdr=.
*** Solution

This one is fun. We can reuse the =expt= procedure for our encoding,
but need a specific answer to decode a pair: the number of times 2
occurs as a factor of the pair is the value of $a$, and the number of
time 3 occurs as a factor is the value of $b$.  Rather than implement
it separately for our =icar= and =icdr= procedures, it's best to
capture this in another descriptive procedure: =factor-count=.

#+BEGIN_SRC scheme :session 2-1 :results silent
  (define (icons a b)
    (* (expt 2 a) (expt 3 b)))

  (define (factor-count i f)
    (define (iter i c)
      (if (= (remainder i f) 0)
          (iter (/ i f) (+ c 1))
          c))
    (iter i 0))

  (define (icar p)
    (factor-count p 2))

  (define (icdr p)
    (factor-count p 3))
#+END_SRC

** TODO Exercise 2.6:
*** Problem

     In case representing pairs as procedures wasn't mind-boggling
     enough, consider that, in a language that can manipulate
     procedures, we can get by without numbers (at least insofar as
     non-negative integers are concerned) by implementing 0 and the
     operation of adding 1 as

#+BEGIN_SRC
          (define zero (lambda (f) (lambda (x) x)))

          (define (add-1 n)
            (lambda (f) (lambda (x) (f ((n f) x)))))
#+END_SRC

     This representation is known as "Church numerals", after its
     inventor, Alonzo Church, the logician who invented the $\lambda$
     calculus.

     Define =one= and =two= directly (not in terms of =zero= and
     =add-1=).  (Hint: Use substitution to evaluate =(add-1 zero)=).
     Give a direct definition of the addition procedure `+' (not in
     terms of repeated application of `add-1').
*** Solution

* 2.1.4 Extended Exercise: Interval Arithmetic
** WRITEUP Exercise 2.7: Selectors for interval arithmetic
*** Problem
     Alyssa's program is incomplete because she has not
     specified the implementation of the interval abstraction.  Here is
     a definition of the interval constructor:

#+BEGIN_SRC scheme :session 2-1 :results silent
  (define (make-interval a b) (cons a b))
#+END_SRC

     Define selectors =upper-bound= and =lower-bound= to complete the
     implementation.

*** Solution

First, we reproduce the definitions of Alyssa's procedures from the text:

#+BEGIN_SRC scheme :session 2-1 :results silent
  (define (add-interval x y)
    (make-interval (+ (lower-bound x) (lower-bound y))
                   (+ (upper-bound x) (upper-bound y))))

  (define (mul-interval x y)
    (let ((p1 (* (lower-bound x) (lower-bound y)))
          (p2 (* (lower-bound x) (upper-bound y)))
          (p3 (* (upper-bound x) (lower-bound y)))
          (p4 (* (upper-bound x) (upper-bound y))))
      (make-interval (min p1 p2 p3 p4)
                     (max p1 p2 p3 p4))))

  (define (div-interval x y)
    (mul-interval x
                  (make-interval (/ 1.0 (upper-bound y))
                                 (/ 1.0 (lower-bound y)))))

#+END_SRC

The definitions of =upper-bound= and =lower-bound= could not be more
straightforward.

#+BEGIN_SRC scheme :session 2-1 :results silent
  (define (upper-bound i)
    (cdr i))

  (define (lower-bound i)
    (car i))
#+END_SRC

** WRITEUP Exercise 2.8: Subtracting intervals
*** Problem
     Using reasoning analogous to Alyssa's, describe how the
     difference of two intervals may be computed.  Define a
     corresponding subtraction procedure, called =sub-interval=.
*** Solution

This one is a little bit tricky: the "analogous reasoning" that we
need to do is to figure out the smallest and largest possible results
of the operation.  For the smallest, the lowest value we can achieve
is when we subtract the highest possible value of the second interval
for the lowest possible value of the first.  Similarly, the largest
results could occur if the first interval is at its highest value and
the second interval is at its lowest.

#+BEGIN_SRC scheme :session 2-1 :results silent
  (define (sub-interval x y)
    (make-interval (- (lower-bound x) (upper-bound y))
                   (- (upper-bound x) (lower-bound y))))
#+END_SRC

** TODO Exercise 2.9:
*** Problem
     The "width" of an interval is half of the difference between its
     upper and lower bounds.  The width is a measure of the
     uncertainty of the number specified by the interval.  For some
     arithmetic operations the width of the result of combining two
     intervals is a function only of the widths of the argument
     intervals, whereas for others the width of the combination is not
     a function of the widths of the argument intervals.  Show that
     the width of the sum (or difference) of two intervals is a
     function only of the widths of the intervals being added (or
     subtracted).  Give examples to show that this is not true for
     multiplication or division.
*** Solution

** TODO Exercise 2.10:
*** Problem
     Ben Bitdiddle, an expert systems programmer, looks over Alyssa's
     shoulder and comments that it is not clear what it means to
     divide by an interval that spans zero.  Modify Alyssa's code to
     check for this condition and to signal an error if it occurs.
*** Solution

** TODO Exercise 2.11: Percentage tolerances for intervals
*** Problem
     In passing, Ben also cryptically comments: "By testing the signs
     of the endpoints of the intervals, it is possible to break
     =mul-interval= into nine cases, only one of which requires more
     than two multiplications."  Rewrite this procedure using Ben's
     suggestion.

     After debugging her program, Alyssa shows it to a potential user,
     who complains that her program solves the wrong problem.  He
     wants a program that can deal with numbers represented as a
     center value and an additive tolerance; for example, he wants to
     work with intervals such as $3.5 \pm 0.15$ rather than $\left[3.35,
     3.65\right]$.  Alyssa returns to her desk and fixes this problem by
     supplying an alternate constructor and alternate selectors:

#+BEGIN_SRC
          (define (make-center-width c w)
            (make-interval (- c w) (+ c w)))

          (define (center i)
            (/ (+ (lower-bound i) (upper-bound i)) 2))

          (define (width i)
            (/ (- (upper-bound i) (lower-bound i)) 2))
#+END_SRC

     Unfortunately, most of Alyssa's users are engineers.  Real
     engineering situations usually involve measurements with only a
     small uncertainty, measured as the ratio of the width of the
     interval to the midpoint of the interval.  Engineers usually
     specify percentage tolerances on the parameters of devices, as in
     the resistor specifications given earlier.
*** Solution

#+BEGIN_SRC scheme :session 2-1 :results silent
  (define (make-center-percent c p)
    (make-center-width c (* c */ p 100.0)))
#+END_SRC

** TODO Exercise 2.12:
*** Problem
     Define a constructor =make-center-percent= that
     takes a center and a percentage tolerance and produces the desired
     interval.  You must also define a selector =percent= that produces
     the percentage tolerance for a given interval.  The =center=
     selector is the same as the one shown above.
*** Solution

** TODO Exercise 2.13:
*** Problem
     Show that under the assumption of small percentage tolerances
     there is a simple formula for the approximate percentage
     tolerance of the product of two intervals in terms of the
     tolerances of the factors.  You may simplify the problem by
     assuming that all numbers are positive.

*** Solution

** TODO Exercise 2.14:
*** Problem
     After considerable work, Alyssa P. Hacker delivers her finished
     system.  Several years later, after she has forgotten all about
     it, she gets a frenzied call from an irate user, Lem E. Tweakit.
     It seems that Lem has noticed that the formula for parallel
     resistors can be written in two algebraically equivalent ways:
     \[\frac{r_1 r_2}{r_1 + r_2}\]
     and
     \[\frac{1}{1/r_1 + 1/r_2}\]

     He has written the following two programs, each of which computes
     the parallel-resistors formula differently:

#+BEGIN_SRC
          (define (par1 r1 r2)
            (div-interval (mul-interval r1 r2)
                          (add-interval r1 r2)))

          (define (par2 r1 r2)
            (let ((one (make-interval 1 1)))
              (div-interval one
                            (add-interval (div-interval one r1)
                                          (div-interval one r2)))))
#+END_SRC


     Lem complains that Alyssa's program gives different answers for
     the two ways of computing. This is a serious complaint.

     Demonstrate that Lem is right.  Investigate the
     behavior of the system on a variety of arithmetic expressions.
     Make some intervals $A$ and $B$, and use them in computing the
     expressions $A/A$ and $A/B$.  You will get the most insight by using
     intervals whose width is a small percentage of the center value.
     Examine the results of the computation in center-percent form (see
     Exercise 2.12).
*** Solution

** TODO Exercise 2.15:
*** Problem
     Eva Lu Ator, another user, has also noticed the different
     intervals computed by different but algebraically equivalent
     expressions. She says that a formula to compute with intervals
     using Alyssa's system will produce tighter error bounds if it can
     be written in such a form that no variable that represents an
     uncertain number is repeated.  Thus, she says, =par2= is a
     "better" program for parallel resistances than =par1=.  Is she
     right?  Why?
*** Solution

** TODO Exercise 2.16:
*** Problem
     Explain, in general, why equivalent algebraic expressions may
     lead to different answers.  Can you devise an interval-arithmetic
     package that does not have this shortcoming, or is this task
     impossible?  (Warning: This problem is very difficult.)
*** Solution
