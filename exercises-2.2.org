#+TITLE: SICP Exercise Solutions for Section 2.2
#+AUTHOR: Paul L. Snyder
#+EMAIL: paul@pataprogramming.com
#+TODO: TODO(t) WRITEUP(w) || (d)

* 2.2.1 Representing Sequences
** WRITEUP Exercise 2.17:
*** Problem
     Define a procedure `last-pair' that returns the
     list that contains only the last element of a given (nonempty)
     list:

#+BEGIN_EXAMPLE
          (last-pair (list 23 72 149 34))
          (34)
#+END_EXAMPLE

*** Solution

#+BEGIN_SRC scheme :session 2-2 :results value
  (define (last-pair lst)
    (if (null? (cdr lst))
        lst
        (last-pair (cdr lst))))

  (last-pair (list 23 72 149 34))
#+END_SRC

#+RESULTS:
| 34 |

** WRITEUP Exercise 2.18:
*** Problem
     Define a procedure `reverse' that takes a list as
     argument and returns a list of the same elements in reverse order:

#+BEGIN_EXAMPLE
          (reverse (list 1 4 9 16 25))
          (25 16 9 4 1)
#+END_EXAMPLE

*** Solution
#+BEGIN_SRC scheme :session 2-2 :results value
  (define (reverse lst)
    (define (iter lst ret)
      (if (null? lst)
          ret
          (iter (cdr lst) (cons (car lst) ret))))
    (iter lst null))
#+END_SRC

#+RESULTS:

** TODO Exercise 2.19:
*** Problem
     Consider the change-counting program of section
     *Note 1-2-2::.  It would be nice to be able to easily change the
     currency used by the program, so that we could compute the number
     of ways to change a British pound, for example.  As the program is
     written, the knowledge of the currency is distributed partly into
     the procedure `first-denomination' and partly into the procedure
     `count-change' (which knows that there are five kinds of U.S.
     coins).  It would be nicer to be able to supply a list of coins to
     be used for making change.

     We want to rewrite the procedure `cc' so that its second argument
     is a list of the values of the coins to use rather than an integer
     specifying which coins to use.  We could then have lists that
     defined each kind of currency:

#+BEGIN_EXAMPLE
          (define us-coins (list 50 25 10 5 1))

          (define uk-coins (list 100 50 20 10 5 2 1 0.5))
#+END_EXAMPLE

     We could then call `cc' as follows:

#+BEGIN_EXAMPLE
          (cc 100 us-coins)
          292
#+END_EXAMPLE

     To do this will require changing the program `cc' somewhat.  It
     will still have the same form, but it will access its second
     argument differently, as follows:

          (define (cc amount coin-values)
            (cond ((= amount 0) 1)
                  ((or (< amount 0) (no-more? coin-values)) 0)
                  (else
                   (+ (cc amount
                          (except-first-denomination coin-values))
                      (cc (- amount
                             (first-denomination coin-values))
                          coin-values)))))

     Define the procedures `first-denomination',
     `except-first-denomination', and `no-more?' in terms of primitive
     operations on list structures.  Does the order of the list
     `coin-values' affect the answer produced by `cc'?  Why or why not?

*** Solution
** WRITEUP Exercise 2.20:
*** Problem
     The procedures `+', `*', and `list' take
     arbitrary numbers of arguments. One way to define such procedures
     is to use `define' with notation "dotted-tail notation".  In a
     procedure definition, a parameter list that has a dot before the
     last parameter name indicates that, when the procedure is called,
     the initial parameters (if any) will have as values the initial
     arguments, as usual, but the final parameter's value will be a "list"
     of any remaining arguments.  For instance, given the definition

#+BEGIN_EXAMPLE
          (define (f x y . z) <BODY>)
#+END_EXAMPLE

     the procedure `f' can be called with two or more arguments.  If we
     evaluate

#+BEGIN_EXAMPLE
          (f 1 2 3 4 5 6)
#+END_EXAMPLE

     then in the body of `f', `x' will be 1, `y' will be 2, and `z'
     will be the list `(3 4 5 6)'.  Given the definition

#+BEGIN_EXAMPLE
          (define (g . w) <BODY>)
#+END_EXAMPLE

     the procedure `g' can be called with zero or more arguments.  If we
     evaluate

#+BEGIN_EXAMPLE
          (g 1 2 3 4 5 6)
#+END_EXAMPLE

     then in the body of `g', `w' will be the list `(1 2 3 4 5 6)'.(4)

     Use this notation to write a procedure `same-parity' that takes
     one or more integers and returns a list of all the arguments that
     have the same even-odd parity as the first argument.  For example,

#+BEGIN_EXAMPLE
          (same-parity 1 2 3 4 5 6 7)
          (1 3 5 7)

          (same-parity 2 3 4 5 6 7)
          (2 4 6)
#+END_EXAMPLE

*** Solution

#+BEGIN_SRC scheme :session 2-2 :results silent
  (define (same-parity key . vals)
    (define (match val) (= (remainder key 2) (remainder val 2)))
    (define (iter ret vals)
      (cond ((null? vals)       (reverse ret))
            ((match (car vals)) (iter (cons (car vals) ret) (cdr vals)))
            (true               (iter ret (cdr vals)))))
    (iter (list key) vals))
#+END_SRC

** WRITEUP Exercise 2.21:
*** Problem
     The procedure `square-list' takes a list of
     numbers as argument and returns a list of the squares of those
     numbers.

#+BEGIN_EXAMPLE
          (square-list (list 1 2 3 4))
          (1 4 9 16)
#+END_EXAMPLE

     Here are two different definitions of `square-list'.  Complete
     both of them by filling in the missing expressions:

#+BEGIN_EXAMPLE
          (define (square-list items)
            (if (null? items)
                nil
                (cons <??> <??>)))

          (define (square-list items)
            (map <??> <??>))
#+END_EXAMPLE

*** Solution

#+BEGIN_SRC scheme :session 2-2
  (define (square-list-1 items)
    (if (null? items)
        null
        (cons (* (car items) (car items)) (square-list-1 (cdr items)))))

  (define (square-list-2 items)
    (map (lambda (x) (* x x)) items))

#+END_SRC

#+RESULTS:

** WRITEUP Exercise 2.22:
*** Problem
     Louis Reasoner tries to rewrite the first
     `square-list' procedure of *Note Exercise 2-21:: so that it
     evolves an iterative process:

#+BEGIN_EXAMPLE
          (define (square-list items)
            (define (iter things answer)
              (if (null? things)
                  answer
                  (iter (cdr things)
                        (cons (square (car things))
                              answer))))
            (iter items nil))
#+END_EXAMPLE

     Unfortunately, defining `square-list' this way produces the answer
     list in the reverse order of the one desired.  Why?

     Louis then tries to fix his bug by interchanging the arguments to
     `cons':

#+BEGIN_EXAMPLE
          (define (square-list items)
            (define (iter things answer)
              (if (null? things)
                  answer
                  (iter (cdr things)
                        (cons answer
                              (square (car things))))))
            (iter items nil))
#+END_EXAMPLE

     This doesn't work either.  Explain.

*** Solution

For the first example, with each recursive call to =iter=, the =cons=
adds successive items to the left side of the list: when using =cons=,
an item added to a list is appended to the beginning (since the only
$O(1)$ access using the pointer to the cell at the start of the list.

For the second, the procedure builds an ill-formed data
structure. Scheme only treats the pattern of cons cells as a list if,
for each cons structure, the left cell holds a data item and the right
cell holds either a cons cell representing a properly structured list
or =nil=.

** WRITEUP Exercise 2.23:
*** Problem
     The procedure =for-each= is similar to =map=.  It
     takes as arguments a procedure and a list of elements.  However,
     rather than forming a list of the results, =for-each= just applies
     the procedure to each of the elements in turn, from left to right.
     The values returned by applying the procedure to the elements are
     not used at all--=for-each= is used with procedures that perform
     an action, such as printing.  For example,

#+BEGIN_EXAMPLE
          (for-each (lambda (x) (newline) (display x))
                    (list 57 321 88))
          57
          321
          88
#+END_EXAMPLE

     The value returned by the call to `for-each' (not illustrated
     above) can be something arbitrary, such as true.  Give an
     implementation of `for-each'.

*** Solution

#+BEGIN_SRC scheme :session 2-2 :results silent
  (define (for-each f items)
    (if (null? items)
        null
        (begin
          (f (car items))
          (for-each f (cdr items)))))
#+END_SRC

#+BEGIN_SRC scheme :session 2-2 :results output
(for-each (lambda (x) (print "woo:") (print x) (newline)) '(1 2 5 6 7))
#+END_SRC

#+RESULTS:
: "woo:"1
: "woo:"2
: "woo:"5
: "woo:"6
: "woo:"7

* 2.2.2 Hierarchical Structures
** TODO Exercise 2.24:
*** Problem
     Suppose we evaluate the expression `(list 1 (list
     2 (list 3 4)))'.  Give the result printed by the interpreter, the
     corresponding box-and-pointer structure, and the interpretation of
     this as a tree (as in *Note Figure 2-6::).

*** Solution

#+BEGIN_SRC scheme :session 2-2 :results output
(print (list 1 (list 2 (list 3 4))))
#+END_SRC

#+RESULTS:
: '(1 (2 (3 4)))

#+BEGIN_SRC dot :file boxes-2-2.png :export results
  digraph {

  n1 [label=1,shape=record];
  n2 [label=2,shape=record];
  n3 [label=3,shape=record];
  n4 [label=4,shape=record];
  nil1 [label=0,shape=record];
  nil2 [label=0,shape=record];
  nil3 [label=0,shape=record];
  c1-1 [level=1,shape=record,label="{<car>|<cdr>}"];
  c1-2 [level=1,shape=record,label="{<car>|<cdr>}"];
  c2-1 [level=2,shape=record,label="{<car>|<cdr>}"];
  c2-2 [level=2,shape=record,label="{<car>|<cdr>}"];
  c3-1 [level=3,shape=record,label="{<car>|<cdr>}"];
  c3-2 [level=3,shape=record,label="{<car>|<cdr>}"];

  c11:car -> n1;
  c11:cdr -> c12;
  c12:car -> c21;
  c12:cdr -> nil1;

  c21:car -> n2;
  c21:cdr -> c22;
  c22:car -> c31;
  c22:cdr -> nil2;

  c31:car -> n3;
  c31:cdr -> c32;
  c32:car -> n4;
  c32:cdr -> nil3



  }
#+END_SRC

#+RESULTS:
[[file:boxes-2-2.png]]

** WRITEUP Exercise 2.25:
*** Problem
     Give combinations of `car's and `cdr's that will
     pick 7 from each of the following lists:

          (1 3 (5 7) 9)

          ((7))

          (1 (2 (3 (4 (5 (6 7))))))

*** Solution

#+BEGIN_SRC scheme :session 2-2 :results output
  (define l1 (list 1 3 (list 5 7) 9))
  (define l2 (list (list 7)))
  (define l3 (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7)))))))

  (print (car (cdr (car (cdr (cdr l1))))))
  (newline)
  (print (car (car l2)))
  (newline)
  (print
   (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr l3)))))))))))))
  (newline)
#+END_SRC

#+RESULTS:
: 7
: 7
: 7

** WRITEUP Exercise 2.26:
*** Problem
     Suppose we define `x' and `y' to be two lists:

#+BEGIN_EXAMPLE
          (define x (list 1 2))
          (define y (list 4 5 6))
#+END_EXAMPLE

     What result is printed by the interpreter in response to
     evaluating each of the following expressions:

#+BEGIN_EXAMPLE
          (append x y)
          (cons x y)
          (list x y)
#+END_EXAMPLE

*** Solution
#+BEGIN_SRC scheme :session 2-2 :results output
  (define x (list 1 2))
  (define y (list 4 5 6))

  (print (append x y))
  (newline)
  (print (cons x y))
  (newline)
  (print (list x y))
#+END_SRC

#+RESULTS:
: '(1 2 4 5 6)
: '((1 2) 4 5 6)
: '((1 2) (4 5 6))

** TODO Exercise 2.27:
*** Problem
     Modify your =reverse= procedure of *Note Exercise
     2-18:: to produce a =deep-reverse= procedure that takes a list as
     argument and returns as its value the list with its elements
     reversed and with all sublists deep-reversed as well.  For example,

#+BEGIN_EXAMPLE
          (define x (list (list 1 2) (list 3 4)))

          x
          ((1 2) (3 4))

          (reverse x)
          ((3 4) (1 2))

          (deep-reverse x)
          ((4 3) (2 1))
#+END_EXAMPLE

*** Solution

#+BEGIN_SRC scheme :session 2-2
  (define (deep-reverse n)
    (define (recurse lst ret)
      (if (null? lst)
          ret
          (recurse (cdr (deep-reverse lst)) (cons (car (deep-reverse lst)) ret))))
    (recurse lst null))

  (define z (list (list 1 2) (list 3 4)))

  (reverse z)

  (deep-reverse z)

#+END_SRC
** TODO Exercise 2.28:
*** Problem
     Write a procedure `fringe' that takes as argument
     a tree (represented as a list) and returns a list whose elements
     are all the leaves of the tree arranged in left-to-right order.
     For example,

          (define x (list (list 1 2) (list 3 4)))

          (fringe x)
          (1 2 3 4)

          (fringe (list x x))
          (1 2 3 4 1 2 3 4)

*** Solution
** TODO Exercise 2.29:
*** Problem
     A binary mobile consists of two branches, a left
     branch and a right branch.  Each branch is a rod of a certain
     length, from which hangs either a weight or another binary mobile.
     We can represent a binary mobile using compound data by
     constructing it from two branches (for example, using `list'):

          (define (make-mobile left right)
            (list left right))

     A branch is constructed from a `length' (which must be a number)
     together with a `structure', which may be either a number
     (representing a simple weight) or another mobile:

          (define (make-branch length structure)
            (list length structure))

       a. Write the corresponding selectors `left-branch' and
          `right-branch', which return the branches of a mobile, and
          `branch-length' and `branch-structure', which return the
          components of a branch.

       b. Using your selectors, define a procedure `total-weight' that
          returns the total weight of a mobile.

       c. A mobile is said to be "balanced" if the torque applied by
          its top-left branch is equal to that applied by its top-right
          branch (that is, if the length of the left rod multiplied by
          the weight hanging from that rod is equal to the
          corresponding product for the right side) and if each of the
          submobiles hanging off its branches is balanced. Design a
          predicate that tests whether a binary mobile is balanced.

       d. Suppose we change the representation of mobiles so that the
          constructors are

               (define (make-mobile left right)
                 (cons left right))

               (define (make-branch length structure)
                 (cons length structure))

          How much do you need to change your programs to convert to
          the new representation?

*** Solution
** TODO Exercise 2.30:
*** Problem
     Define a procedure `square-tree' analogous to the
     `square-list' procedure of *Note Exercise 2-21::.  That is,
     `square-list' should behave as follows:

          (square-tree
           (list 1
                 (list 2 (list 3 4) 5)
                 (list 6 7)))
          (1 (4 (9 16) 25) (36 49))

     Define `square-tree' both directly (i.e., without using any
     higher-order procedures) and also by using `map' and recursion.

*** Solution
** TODO Exercise 2.31:
*** Problem
     Abstract your answer to *Note Exercise 2-30:: to
     produce a procedure `tree-map' with the property that
     `square-tree' could be defined as

          (define (square-tree tree) (tree-map square tree))

*** Solution
** TODO Exercise 2.32:
*** Problem
     We can represent a set as a list of distinct
     elements, and we can represent the set of all subsets of the set as
     a list of lists.  For example, if the set is `(1 2 3)', then the
     set of all subsets is `(() (3) (2) (2 3) (1) (1 3) (1 2) (1 2
     3))'.  Complete the following definition of a procedure that
     generates the set of subsets of a set and give a clear explanation
     of why it works:

          (define (subsets s)
            (if (null? s)
                (list nil)
                (let ((rest (subsets (cdr s))))
                  (append rest (map <??> rest)))))

*** Solution
