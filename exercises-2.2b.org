#+TITLE: SICP Exercise Solutions for Section 2.2.3 and 2.2.4
#+AUTHOR: Paul L. Snyder
#+EMAIL: paul@pataprogramming.com
#+TODO: TODO(t) WRITEUP(w) || (d)

* 2.2.3 Sequences as Conventional Interfaces
** TODO Exercise 2.33: List manipulations as acculumations
*** Problem
     Fill in the missing expressions to complete the
     following definitions of some basic list-manipulation operations
     as accumulations:


          (define (map p sequence)
            (accumulate (lambda (x y) <??>) nil sequence))

          (define (append seq1 seq2)
            (accumulate cons <??> <??>))

          (define (length sequence)
            (accumulate <??> 0 sequence))

*** Solution
** TODO Exercise 2.34: Horner's Rule
*** Problem
     Evaluating a polynomial in x at a given value of
     x can be formulated as an accumulation.  We evaluate the polynomial

          a_n r^n | a_(n-1) r^(n-1) + ... + a_1 r + a_0

     using a well-known algorithm called "Horner's rule", which
     structures the computation as

          (... (a_n r + a_(n-1)) r + ... + a_1) r + a_0

     In other words, we start with a_n, multiply by x, add a_(n-1),
     multiply by x, and so on, until we reach a_0.(3)

     Fill in the following template to produce a procedure that
     evaluates a polynomial using Horner's rule.  Assume that the
     coefficients of the polynomial are arranged in a sequence, from
     a_0 through a_n.

          (define (horner-eval x coefficient-sequence)
            (accumulate (lambda (this-coeff higher-terms) <??>)
                        0
                        coefficient-sequence))

     For example, to compute 1 + 3x + 5x^3 + x^(5) at x = 2 you would
     evaluate

          (horner-eval 2 (list 1 3 0 5 0 1))

*** Solution
** TODO Exercise 2.35: =count-leaves= as an accumulation
*** Problem
     Redefine `count-leaves' from section *Note
     2-2-2:: as an accumulation:

          (define (count-leaves t)
            (accumulate <??> <??> (map <??> <??>)))

*** Solution
** TODO Exercise 2.36: Accumulating over multiple sequenences
*** Problem
     The procedure `accumulate-n' is similar to
     `accumulate' except that it takes as its third argument a sequence
     of sequences, which are all assumed to have the same number of
     elements.  It applies the designated accumulation procedure to
     combine all the first elements of the sequences, all the second
     elements of the sequences, and so on, and returns a sequence of
     the results.  For instance, if `s' is a sequence containing four
     sequences, `((1 2 3) (4 5 6) (7 8 9) (10 11 12)),' then the value
     of `(accumulate-n + 0 s)' should be the sequence `(22 26 30)'.
     Fill in the missing expressions in the following definition of
     `accumulate-n':

          (define (accumulate-n op init seqs)
            (if (null? (car seqs))
                nil
                (cons (accumulate op init <??>)
                      (accumulate-n op init <??>))))

** TODO Exercise 2.37: Implementing vectors and matrices with sequences

Suppose we represent vectors v = (v_i) as sequences of numbers, and
matrices m = (m_(ij)) as sequences of vectors (the rows of the matrix).
For example, the matrix

     +-         -+
     |  1 2 3 4  |
     |  4 5 6 6  |
     |  6 7 8 9  |
     +-         -+

is represented as the sequence `((1 2 3 4) (4 5 6 6) (6 7 8 9))'.  With
this representation, we can use sequence operations to concisely
express the basic matrix and vector operations.  These operations
(which are described in any book on matrix algebra) are the following:

                                            __
     (dot-product v w)      returns the sum >_i v_i w_i

     (matrix-*-vector m v)  returns the vector t,
                                        __
                            where t_i = >_j m_(ij) v_j

     (matrix-*-matrix m n)  returns the matrix p,
                                           __
                            where p_(ij) = >_k m_(ik) n_(kj)

     (transpose m)          returns the matrix n,
                            where n_(ij) = m_(ji)

   We can define the dot product as(4)

     (define (dot-product v w)
       (accumulate + 0 (map * v w)))

   Fill in the missing expressions in the following procedures for
computing the other matrix operations.  (The procedure `accumulate-n'
is defined in *Note Exercise 2-36::.)

     (define (matrix-*-vector m v)
       (map <??> m))

     (define (transpose mat)
       (accumulate-n <??> <??> mat))

     (define (matrix-*-matrix m n)
       (let ((cols (transpose n)))
         (map <??> m)))

*** Solution
** TODO Exercise 2.38: Writing =fold-left=
*** Problem
     The `accumulate' procedure is also known as
     `fold-right', because it combines the first element of the
     sequence with the result of combining all the elements to the
     right.  There is also a `fold-left', which is similar to
     `fold-right', except that it combines elements working in the
     opposite direction:

          (define (fold-left op initial sequence)
            (define (iter result rest)
              (if (null? rest)
                  result
                  (iter (op result (car rest))
                        (cdr rest))))
            (iter initial sequence))

     What are the values of

          (fold-right / 1 (list 1 2 3))

          (fold-left / 1 (list 1 2 3))

          (fold-right list nil (list 1 2 3))

          (fold-left list nil (list 1 2 3))

     Give a property that `op' should satisfy to guarantee that
     `fold-right' and `fold-left' will produce the same values for any
     sequence.

*** Solution
** TODO Exercise 2.39: Defining =reverse= via =fold=
*** Problem
     Complete the following definitions of `reverse'
     (*Note Exercise 2-18::) in terms of `fold-right' and `fold-left'
     from *Note Exercise 2-38:::

          (define (reverse sequence)
            (fold-right (lambda (x y) <??>) nil sequence))

          (define (reverse sequence)
            (fold-left (lambda (x y) <??>) nil sequence))

*** Solution
** TODO Exercise 2.40: Generating unique pairs
*** Problem
     Define a procedure `unique-pairs' that, given an
     integer n, generates the sequence of pairs (i,j) with 1 <= j< i <=
     n.  Use `unique-pairs' to simplify the definition of
     `prime-sum-pairs' given above.

*** Solution
** TODO Exercise 2.41: Finding ordered triples
*** Problem
     Write a procedure to find all ordered triples of
     distinct positive integers i, j, and k less than or equal to a
     given integer n that sum to a given integer s.

*** Solution
** TODO Exercise 2.42: The Eight-Queens Puzzle
*** Problem
     The "eight-queens puzzle" asks how to place eight
     queens on a chessboard so that no queen is in check from any other
     (i.e., no two queens are in the same row, column, or diagonal).
     One possible solution is shown in *Note Figure 2-8::.  One way to
     solve the puzzle is to work across the board, placing a queen in
     each column.  Once we have placed k - 1 queens, we must place the
     kth queen in a position where it does not check any of the queens
     already on the board.  We can formulate this approach recursively:
     Assume that we have already generated the sequence of all possible
     ways to place k - 1 queens in the first k - 1 columns of the
     board.  For each of these ways, generate an extended set of
     positions by placing a queen in each row of the kth column.  Now
     filter these, keeping only the positions for which the queen in
     the kth column is safe with respect to the other queens.  This
     produces the sequence of all ways to place k queens in the first k
     columns.  By continuing this process, we will produce not only one
     solution, but all solutions to the puzzle.

     *Figure 2.8:* A solution to the eight-queens puzzle.

          +---+---+---+---+---+---+---+---+
          |   |   |   |   |   | Q |   |   |
          +---+---+---+---+---+---+---+---+
          |   |   | Q |   |   |   |   |   |
          +---+---+---+---+---+---+---+---+
          | Q |   |   |   |   |   |   |   |
          +---+---+---+---+---+---+---+---+
          |   |   |   |   |   |   | Q |   |
          +---+---+---+---+---+---+---+---+
          |   |   |   |   | Q |   |   |   |
          +---+---+---+---+---+---+---+---+
          |   |   |   |   |   |   |   | Q |
          +---+---+---+---+---+---+---+---+
          |   | Q |   |   |   |   |   |   |
          +---+---+---+---+---+---+---+---+
          |   |   |   | Q |   |   |   |   |
          +---+---+---+---+---+---+---+---+


     We implement this solution as a procedure `queens', which returns a
     sequence of all solutions to the problem of placing n queens on an
     n*n chessboard.  `Queens' has an internal procedure `queen-cols'
     that returns the sequence of all ways to place queens in the first
     k columns of the board.

          (define (queens board-size)
            (define (queen-cols k)
              (if (= k 0)
                  (list empty-board)
                  (filter
                   (lambda (positions) (safe? k positions))
                   (flatmap
                    (lambda (rest-of-queens)
                      (map (lambda (new-row)
                             (adjoin-position new-row k rest-of-queens))
                           (enumerate-interval 1 board-size)))
                    (queen-cols (- k 1))))))
            (queen-cols board-size))

     In this procedure `rest-of-queens' is a way to place k - 1 queens
     in the first k - 1 columns, and `new-row' is a proposed row in
     which to place the queen for the kth column.  Complete the program
     by implementing the representation for sets of board positions,
     including the procedure `adjoin-position', which adjoins a new
     row-column position to a set of positions, and `empty-board',
     which represents an empty set of positions.  You must also write
     the procedure `safe?', which determines for a set of positions,
     whether the queen in the kth column is safe with respect to the
     others.  (Note that we need only check whether the new queen is
     safe--the other queens are already guaranteed safe with respect to
     each other.)

*** Solution
** TODO Exercise 2.43: Performance of nested mappings
*** Problem
     Louis Reasoner is having a terrible time doing
     *Note Exercise 2-42::.  His `queens' procedure seems to work, but
     it runs extremely slowly.  (Louis never does manage to wait long
     enough for it to solve even the 6*6 case.)  When Louis asks Eva Lu
     Ator for help, she points out that he has interchanged the order
     of the nested mappings in the `flatmap', writing it as

          (flatmap
           (lambda (new-row)
             (map (lambda (rest-of-queens)
                    (adjoin-position new-row k rest-of-queens))
                  (queen-cols (- k 1))))
           (enumerate-interval 1 board-size))

     Explain why this interchange makes the program run slowly.
     Estimate how long it will take Louis's program to solve the
     eight-queens puzzle, assuming that the program in *Note Exercise
     2-42:: solves the puzzle in time T.

*** Solution

* 2.2.4 Example: A Picture Language
** TODO Exercise 2.44: A simple picture procedure
*** Problem
     Define the procedure `up-split' used by
     `corner-split'.  It is similar to `right-split', except that it
     switches the roles of `below' and `beside'.

*** Solution
** TODO Exercise 2.45: Generalizing splitting
*** Problem
     `Right-split' and `up-split' can be expressed as
     instances of a general splitting operation.  Define a procedure
     `split' with the property that evaluating

          (define right-split (split beside below))
          (define up-split (split below beside))

     produces procedures `right-split' and `up-split' with the same
     behaviors as the ones already defined.

*** Solution
** TODO Exercise 2.46: A vector abstraction
*** Problem
     A two-dimensional vector $v$ running from the
     origin to a point can be represented as a pair consisting of an
     $x$-coordinate and a $y$-coordinate.  Implement a data abstraction for
     vectors by giving a constructor `make-vect' and corresponding
     selectors `xcor-vect' and `ycor-vect'.  In terms of your selectors
     and constructor, implement procedures `add-vect', `sub-vect', and
     `scale-vect' that perform the operations vector addition, vector
     subtraction, and multiplying a vector by a scalar:

          (x_1, y_1) + (x_2, y_2) = (x_1 + x_2, y_1 + y_2)
          (x_1, y_1) - (x_2, y_2) = (x_1 - x_2, y_1 - y_2)
                       s * (x, y) = (sx, sy)

*** Solution
** TODO Exercise 2.47: Selectors for frame constructors
*** Problem
     Here are two possible constructors for frames:

          (define (make-frame origin edge1 edge2)
            (list origin edge1 edge2))

          (define (make-frame origin edge1 edge2)
            (cons origin (cons edge1 edge2)))

     For each constructor supply the appropriate selectors to produce an
     implementation for frames.

*** Solution
** TODO Exercise 2.48: Representing segments
*** Problem
     A directed line segment in the plane can be
     represented as a pair of vectors--the vector running from the
     origin to the start-point of the segment, and the vector running
     from the origin to the end-point of the segment.  Use your vector
     representation from *Note Exercise 2-46:: to define a
     representation for segments with a constructor `make-segment' and
     selectors `start-segment' and `end-segment'.

*** Solution
** TODO Exercise 2.49: Defining some primitive painters
*** Problem
     Use `segments->painter' to define the following
     primitive painters:

       a. The painter that draws the outline of the designated frame.

       b. The painter that draws an "X" by connecting opposite corners
          of the frame.

       c. The painter that draws a diamond shape by connecting the
          midpoints of the sides of the frame.

       d. The `wave' painter.

*** Solution
** TODO Exercise 2.50: A horizontal flip transformer
*** Problem
     Define the transformation `flip-horiz', which
     flips painters horizontally, and transformations that rotate
     painters counterclockwise by 180 degrees and 270 degrees.

*** Solution
** TODO Exercise 2.51: Defining =below=
*** Problem
     Define the `below' operation for painters.
     `Below' takes two painters as arguments.  The resulting painter,
     given a frame, draws with the first painter in the bottom of the
     frame and with the second painter in the top.  Define `below' in
     two different ways--first by writing a procedure that is analogous
     to the `beside' procedure given above, and again in terms of
     `beside' and suitable rotation operations (from *Note Exercise
     2-50::).

*** Solution
** TODO Exercise 2.52: Changing patterns
*** Problem
     Make changes to the square limit of `wave' shown
     in *Note Figure 2-9:: by working at each of the levels described
     above.  In particular:

       a. Add some segments to the primitive `wave' painter of *Note
          Exercise 2-49:: (to add a smile, for example).

       b. Change the pattern constructed by `corner-split' (for
          example, by using only one copy of the `up-split' and
          `right-split' images instead of two).

       c. Modify the version of `square-limit' that uses
          `square-of-four' so as to assemble the corners in a different
          pattern.  (For example, you might make the big Mr. Rogers
          look outward from each corner of the square.)

*** Solution
